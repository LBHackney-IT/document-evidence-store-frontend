version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.2.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  cypress: cypress-io/cypress@3
  node: circleci/node@6.3.0
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  node:
    docker:
      - image: cimg/node:20.18.2-browsers
    working_directory: ~/project
  python:
    docker:
      - image: cimg/python:3.7

references:
  workspace_root: &workspace_root '.'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
      stage:
        type: string
        default: staging

    steps:
      - checkout
      - *attach_workspace
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - run:
          name: Deploy application
          command: |
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            npm prune --production
            sudo npm i -g serverless
            sls deploy -s <<parameters.stage>>
      # - run:
      #     name: clean up
      #     command: |
      #       unset AWS_ACCESS_KEY_ID
      #       unset AWS_SECRET_ACCESS_KEY
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - .aws
  # assume-role-and-persist-workspace:
  #   description: 'Assumes deployment role and persists credentials across jobs'
  #   parameters:
  #     aws-account:
  #       type: string
  #   steps:
  #     - checkout
  #     - *attach_workspace
  #     - aws_assume_role/assume_role:
  #         account: <<parameters.aws-account>>
  #         profile_name: default
  #         role: 'LBH_Circle_CI_Deployment_Role'
  #     # - run:
  #     #     name: clean up
  #     #     command: |
  #     #       unset AWS_ACCESS_KEY_ID
  #     #       unset AWS_SECRET_ACCESS_KEY
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - .aws

  deploy-lambda:
    description: 'Deploys application'
    parameters:
      stage:
        type: string
        default: staging
    steps:
      # - run:
      #     name: clean up
      #     command: |
      #       unset AWS_ACCESS_KEY_ID
      #       unset AWS_SECRET_ACCESS_KEY
      - run:
          name: Deploy application
          command: |
            npm prune --production
            sudo npm i -g serverless
            sls deploy -s <<parameters.stage>>

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jobs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
jobs:
  build:
    executor: node
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Build Next application
          command: npm run build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build
            - node_modules

  lint-and-test:
    executor: node
    steps:
      - checkout
      - *attach_workspace
      # - attach_workspace:
      #     at: *workspace_root
      - run:
          name: Run linter
          command: npm run lint:ci
      - run:
          name: Run prettier
          command: npm run prettier:test
      - run:
          name: Run unit tests
          command: npm run test:unit:ci
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - coverage
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: coverage

  run-cypress-e2e:
    executor: node
    steps:
      - checkout
      - *attach_workspace
      # - attach_workspace:
      #     at: *workspace_root
      - run:
          name: Copy envs
          command: cp .env.sample .env
      - cypress/install
      - cypress/run-tests:
          start-command: npm run start:ci
          cypress-command: npx wait-on http-get://127.0.0.1:3000/api/ping && npx cypress run
      - store_test_results:
          path: cypress/results
      - store_artifacts:
          path: cypress/results

  sonar-scan:
    executor: node
    steps:
      - checkout
      - *attach_workspace
      - sonarcloud/scan

  assume-role-staging:
    # executor: python
    executor: aws-cli/default
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
          stage: staging

  assume-role-production:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  deploy-staging:
    executor: node

    steps:
      - checkout
      - *attach_workspace

      - deploy-lambda:
          stage: staging

  deploy-production:
    executor: node

    steps:
      - checkout
      - *attach_workspace

      - deploy-lambda:
          stage: production

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build

      - lint-and-test:
          requires:
            - build

      - run-cypress-e2e:
          requires:
            - build

      - sonar-scan:
          context: SonarCloud
          requires:
            - lint-and-test

      - assume-role-staging:
          context:
            - api-assume-role-document-evidence-store-staging-context
            - 'Serverless Framework'
          requires:
            - run-cypress-e2e
            - lint-and-test
          filters:
            branches:
              only:
                # - main
                - TS-1902-Update-frameworks

      - deploy-staging:
          context:
            - 'Serverless Framework'
          requires:
            - assume-role-staging

      - permit-deploy-production:
          context:
            - 'Serverless Framework'
          type: approval
          requires:
            - deploy-staging

      - assume-role-production:
          context: api-assume-role-document-evidence-store-production-context
          requires:
            - permit-deploy-production

      - deploy-production:
          requires:
            - assume-role-production
