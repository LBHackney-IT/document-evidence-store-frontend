version: 2.1

orbs:
  cypress: cypress-io/cypress@3.3.1
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  node: circleci/node@6.3.0

executors:
  node:
    docker:
      - image: cimg/node:20.18.2-browsers
    working_directory: ~/project
  python:
    docker:
      - image: cimg/python:3.7

references:
  workspace_root: &workspace_root '.'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  deploy-lambda:
    description: 'Deploys application'
    parameters:
      stage:
        type: string
        default: staging
    steps:
      - run:
          name: Deploy application
          command: |
            npm prune --production
            sudo npm i -g serverless
            sls deploy -s <<parameters.stage>>

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jobs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
jobs:
  build:
    executor: node
    steps:
      - checkout
      - node/install-packages
      - run:
          name: Copy envs
          command: cp .env.sample .env
      - run:
          name: Build Next application
          command: npm run build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build
            - node_modules

  lint-and-test:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: *workspace_root
      - run:
          name: Run linter
          command: npm run lint:ci
      - run:
          name: Run prettier
          command: npm run prettier:test
      - run:
          name: Run unit tests
          command: npm run test:unit
          # environment:
          #   JEST_JUNIT_OUTPUT_DIR: test_results
          #   JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: coverage

  run-cypress-e2e:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: *workspace_root
      # cypress/install checks out the code, installs dependencies (including NPM), etc. It uses optimal caching strategies for NPM with npm ci.
      - cypress/install
      - cypress/run-tests:
          start-command: npm run start:ci
          cypress-command: npx wait-on http-get://127.0.0.1:3000/api/ping && npx cypress run

      # Store the test results so CircleCI can provide insights and do parallel test splitting
      - store_test_results:
          path: cypress/results

      # We also store the test results as an artefact so we can download/access them when we need
      - store_artifacts:
          path: cypress/results

  assume-role-staging:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  deploy-staging:
    executor: node

    steps:
      - *attach_workspace
      - checkout

      - deploy-lambda:
          stage: staging

  deploy-production:
    executor: node

    steps:
      - *attach_workspace
      - checkout

      - deploy-lambda:
          stage: production

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build
      - lint-and-test:
          requires:
            - build
      - run-cypress-e2e:
          requires:
            - build

      - assume-role-staging:
          context: api-assume-role-document-evidence-store-staging-context
          requires:
            - run-cypress-e2e
            - lint-and-test
          filters:
            branches:
              only:
                - main

      - deploy-staging:
          requires:
            - assume-role-staging

      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging

      - assume-role-production:
          context: api-assume-role-document-evidence-store-production-context
          requires:
            - permit-deploy-production

      - deploy-production:
          requires:
            - assume-role-production
