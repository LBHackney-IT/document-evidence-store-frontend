version: 2.1

orbs:
  cypress: cypress-io/cypress@3.3.1
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  node: circleci/node@6.3.0

executors:
  node:
    docker:
      - image: cimg/node:20.18.2-browsers
    # working_directory: ~/project
  python:
    docker:
      - image: cimg/python:3.7
  # cypress-executor:
  #   docker:
  #     - image: cypress/base:20.18.0

references:
  workspace_root: &workspace_root '.'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Commands ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
commands:
  assume-role-and-persist-workspace:
    description: 'Assumes deployment role and persists credentials across jobs'
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  deploy-lambda:
    description: 'Deploys application'
    parameters:
      stage:
        type: string
        default: staging
    steps:
      - run:
          name: Deploy application
          command: |
            npm prune --production
            sudo npm i -g serverless
            sls deploy -s <<parameters.stage>>

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Jobs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
jobs:
  build:
    executor: node
    steps:
      - checkout
      # - run:
      #     name: Copy envs
      #     command: cp .env.sample .env
      - node/install-packages
      - run:
          name: Build Next application
          command: npm run build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - build
            - node_modules

  lint-and-test:
    executor: node
    steps:
      - cypress/install
      - run:
          name: Run linter
          command: npm run lint
      - run:
          name: Run prettier
          command: npm run prettier:test
      - run:
          name: Run unit tests
          command: npm run test:unit:ci
          environment:
            JEST_JUNIT_OUTPUT_DIR: test_results
            JEST_JUNIT_ADD_FILE_ATTRIBUTE: 'true'
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: coverage

  run-cypress-e2e:
    executor: node
    resource_class: medium+
    # parallelism: 8
    # parameters:
    #   browser:
    #     type: string
    #     default: chrome
    #   height:
    #     type: integer
    #     default: 768
    #   width:
    #     type: integer
    #     default: 1366
    steps:
      # cypress/install checks out the code, installs dependencies (including NPM), etc. It uses optimal caching strategies for NPM with npm ci.
      - cypress/install
        # install-browsers: true
      - run:
          name: Run application
          command: npm run start:ci
          wait-on: 'http-get://127.0.0.1:3000/api/ping'

      # command: |
      #   find cypress/e2e -type f -name "*.[jt]s" | sort | uniq > circleci_test_files.txt
      #   # Use time-based splitting for maximum efficiency. Cypress expects files to be separated with commas
      #   circleci tests split --split-by=timings circleci_test_files.txt | perl -pe 'chomp if eof' | tr '\n' ',' > circleci_test_slice.txt
      #   cat circleci_test_slice.txt
      - cypress/run-tests:
          cypress-command: npx cypress run
          # wait-on: 'http-get://127.0.0.1:3000/api/ping'
          # cypress-command: npx cypress run
          # --browser=<< parameters.browser >> --config viewportHeight=<< parameters.height >>,viewportWidth=<< parameters.width >> --reporter junit --reporter-options "mochaFile=cypress/results/results-[hash].xml" --spec "$(cat circleci_test_slice.txt)"
      # - run:
      #     name: Fix up JUnit output
      #     command: node scripts/fix-junit-xml.js

      # Store the test results so CircleCI can provide insights and do parallel test splitting
      - store_test_results:
          path: cypress/results

      # We also store the test results as an artefact so we can download/access them when we need
      - store_artifacts:
          path: cypress/results

  assume-role-staging:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  deploy-staging:
    executor: node

    steps:
      - *attach_workspace
      - checkout

      - deploy-lambda:
          stage: staging

  deploy-production:
    executor: node

    steps:
      - *attach_workspace
      - checkout

      - deploy-lambda:
          stage: production

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Workflows ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #
workflows:
  version: 2
  continuous-delivery:
    jobs:
      - lint-and-test
      - build

      - run-cypress-e2e:
          requires:
            - build
      # - cypress/install: # Use Cypress step to install and cache dependencies
      #     build: npm run build
      #     executor: cypress-executor
      #     post-checkout:
      #       - run: cp .env.sample .env

      # - test:
      #     requires:
      #       - cypress/install

      # - cypress/run:
      #     requires:
      #       - cypress/install
      #     executor: cypress-executor
      #     attach-workspace: true
      #     start: npm run start:ci
      #     wait-on: 'http-get://127.0.0.1:3000/api/ping'
      #     store_artifacts: true

      - assume-role-staging:
          context: api-assume-role-document-evidence-store-staging-context
          requires:
            - run-cypress-e2e
            - lint-and-test
          filters:
            branches:
              only:
                - main

      - deploy-staging:
          requires:
            - assume-role-staging

      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging

      - assume-role-production:
          context: api-assume-role-document-evidence-store-production-context
          requires:
            - permit-deploy-production

      - deploy-production:
          requires:
            - assume-role-production
